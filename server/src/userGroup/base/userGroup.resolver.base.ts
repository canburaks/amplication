/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserGroupArgs } from "./CreateUserGroupArgs";
import { UpdateUserGroupArgs } from "./UpdateUserGroupArgs";
import { DeleteUserGroupArgs } from "./DeleteUserGroupArgs";
import { UserGroupFindManyArgs } from "./UserGroupFindManyArgs";
import { UserGroupFindUniqueArgs } from "./UserGroupFindUniqueArgs";
import { UserGroup } from "./UserGroup";
import { Group } from "../../group/base/Group";
import { User } from "../../user/base/User";
import { UserGroupService } from "../userGroup.service";

@graphql.Resolver(() => UserGroup)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UserGroupResolverBase {
  constructor(
    protected readonly service: UserGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserGroup",
    action: "read",
    possession: "any",
  })
  async _userGroupsMeta(
    @graphql.Args() args: UserGroupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserGroup])
  @nestAccessControl.UseRoles({
    resource: "UserGroup",
    action: "read",
    possession: "any",
  })
  async userGroups(
    @graphql.Args() args: UserGroupFindManyArgs
  ): Promise<UserGroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserGroup",
    action: "read",
    possession: "own",
  })
  async userGroup(
    @graphql.Args() args: UserGroupFindUniqueArgs
  ): Promise<UserGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserGroup)
  @nestAccessControl.UseRoles({
    resource: "UserGroup",
    action: "create",
    possession: "any",
  })
  async createUserGroup(
    @graphql.Args() args: CreateUserGroupArgs
  ): Promise<UserGroup> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserGroup)
  @nestAccessControl.UseRoles({
    resource: "UserGroup",
    action: "update",
    possession: "any",
  })
  async updateUserGroup(
    @graphql.Args() args: UpdateUserGroupArgs
  ): Promise<UserGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserGroup)
  @nestAccessControl.UseRoles({
    resource: "UserGroup",
    action: "delete",
    possession: "any",
  })
  async deleteUserGroup(
    @graphql.Args() args: DeleteUserGroupArgs
  ): Promise<UserGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async group(@graphql.Parent() parent: UserGroup): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: UserGroup): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
