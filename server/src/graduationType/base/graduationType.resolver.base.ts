/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGraduationTypeArgs } from "./CreateGraduationTypeArgs";
import { UpdateGraduationTypeArgs } from "./UpdateGraduationTypeArgs";
import { DeleteGraduationTypeArgs } from "./DeleteGraduationTypeArgs";
import { GraduationTypeFindManyArgs } from "./GraduationTypeFindManyArgs";
import { GraduationTypeFindUniqueArgs } from "./GraduationTypeFindUniqueArgs";
import { GraduationType } from "./GraduationType";
import { GroupFindManyArgs } from "../../group/base/GroupFindManyArgs";
import { Group } from "../../group/base/Group";
import { InstituteTypeFindManyArgs } from "../../instituteType/base/InstituteTypeFindManyArgs";
import { InstituteType } from "../../instituteType/base/InstituteType";
import { GraduationTypeService } from "../graduationType.service";

@graphql.Resolver(() => GraduationType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class GraduationTypeResolverBase {
  constructor(
    protected readonly service: GraduationTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "read",
    possession: "any",
  })
  async _graduationTypesMeta(
    @graphql.Args() args: GraduationTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GraduationType])
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "read",
    possession: "any",
  })
  async graduationTypes(
    @graphql.Args() args: GraduationTypeFindManyArgs
  ): Promise<GraduationType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GraduationType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "read",
    possession: "own",
  })
  async graduationType(
    @graphql.Args() args: GraduationTypeFindUniqueArgs
  ): Promise<GraduationType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GraduationType)
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "create",
    possession: "any",
  })
  async createGraduationType(
    @graphql.Args() args: CreateGraduationTypeArgs
  ): Promise<GraduationType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GraduationType)
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "update",
    possession: "any",
  })
  async updateGraduationType(
    @graphql.Args() args: UpdateGraduationTypeArgs
  ): Promise<GraduationType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GraduationType)
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "delete",
    possession: "any",
  })
  async deleteGraduationType(
    @graphql.Args() args: DeleteGraduationTypeArgs
  ): Promise<GraduationType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Group])
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async groups(
    @graphql.Parent() parent: GraduationType,
    @graphql.Args() args: GroupFindManyArgs
  ): Promise<Group[]> {
    const results = await this.service.findGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [InstituteType])
  @nestAccessControl.UseRoles({
    resource: "InstituteType",
    action: "read",
    possession: "any",
  })
  async instituteTypes(
    @graphql.Parent() parent: GraduationType,
    @graphql.Args() args: InstituteTypeFindManyArgs
  ): Promise<InstituteType[]> {
    const results = await this.service.findInstituteTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
