/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateInstituteArgs } from "./CreateInstituteArgs";
import { UpdateInstituteArgs } from "./UpdateInstituteArgs";
import { DeleteInstituteArgs } from "./DeleteInstituteArgs";
import { InstituteFindManyArgs } from "./InstituteFindManyArgs";
import { InstituteFindUniqueArgs } from "./InstituteFindUniqueArgs";
import { Institute } from "./Institute";
import { GroupFindManyArgs } from "../../group/base/GroupFindManyArgs";
import { Group } from "../../group/base/Group";
import { Country } from "../../country/base/Country";
import { InstituteService } from "../institute.service";

@graphql.Resolver(() => Institute)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class InstituteResolverBase {
  constructor(
    protected readonly service: InstituteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Institute",
    action: "read",
    possession: "any",
  })
  async _institutesMeta(
    @graphql.Args() args: InstituteFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Institute])
  @nestAccessControl.UseRoles({
    resource: "Institute",
    action: "read",
    possession: "any",
  })
  async institutes(
    @graphql.Args() args: InstituteFindManyArgs
  ): Promise<Institute[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Institute, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Institute",
    action: "read",
    possession: "own",
  })
  async institute(
    @graphql.Args() args: InstituteFindUniqueArgs
  ): Promise<Institute | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Institute)
  @nestAccessControl.UseRoles({
    resource: "Institute",
    action: "create",
    possession: "any",
  })
  async createInstitute(
    @graphql.Args() args: CreateInstituteArgs
  ): Promise<Institute> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        country: args.data.country
          ? {
              connect: args.data.country,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Institute)
  @nestAccessControl.UseRoles({
    resource: "Institute",
    action: "update",
    possession: "any",
  })
  async updateInstitute(
    @graphql.Args() args: UpdateInstituteArgs
  ): Promise<Institute | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          country: args.data.country
            ? {
                connect: args.data.country,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Institute)
  @nestAccessControl.UseRoles({
    resource: "Institute",
    action: "delete",
    possession: "any",
  })
  async deleteInstitute(
    @graphql.Args() args: DeleteInstituteArgs
  ): Promise<Institute | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Group])
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async groups(
    @graphql.Parent() parent: Institute,
    @graphql.Args() args: GroupFindManyArgs
  ): Promise<Group[]> {
    const results = await this.service.findGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Country, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "any",
  })
  async country(@graphql.Parent() parent: Institute): Promise<Country | null> {
    const result = await this.service.getCountry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
