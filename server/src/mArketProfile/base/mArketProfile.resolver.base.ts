/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMArketProfileArgs } from "./CreateMArketProfileArgs";
import { UpdateMArketProfileArgs } from "./UpdateMArketProfileArgs";
import { DeleteMArketProfileArgs } from "./DeleteMArketProfileArgs";
import { MArketProfileFindManyArgs } from "./MArketProfileFindManyArgs";
import { MArketProfileFindUniqueArgs } from "./MArketProfileFindUniqueArgs";
import { MArketProfile } from "./MArketProfile";
import { GroupFindManyArgs } from "../../group/base/GroupFindManyArgs";
import { Group } from "../../group/base/Group";
import { MArketProfileService } from "../mArketProfile.service";

@graphql.Resolver(() => MArketProfile)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MArketProfileResolverBase {
  constructor(
    protected readonly service: MArketProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MArketProfile",
    action: "read",
    possession: "any",
  })
  async _mArketProfilesMeta(
    @graphql.Args() args: MArketProfileFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MArketProfile])
  @nestAccessControl.UseRoles({
    resource: "MArketProfile",
    action: "read",
    possession: "any",
  })
  async mArketProfiles(
    @graphql.Args() args: MArketProfileFindManyArgs
  ): Promise<MArketProfile[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MArketProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MArketProfile",
    action: "read",
    possession: "own",
  })
  async mArketProfile(
    @graphql.Args() args: MArketProfileFindUniqueArgs
  ): Promise<MArketProfile | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MArketProfile)
  @nestAccessControl.UseRoles({
    resource: "MArketProfile",
    action: "create",
    possession: "any",
  })
  async createMArketProfile(
    @graphql.Args() args: CreateMArketProfileArgs
  ): Promise<MArketProfile> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MArketProfile)
  @nestAccessControl.UseRoles({
    resource: "MArketProfile",
    action: "update",
    possession: "any",
  })
  async updateMArketProfile(
    @graphql.Args() args: UpdateMArketProfileArgs
  ): Promise<MArketProfile | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MArketProfile)
  @nestAccessControl.UseRoles({
    resource: "MArketProfile",
    action: "delete",
    possession: "any",
  })
  async deleteMArketProfile(
    @graphql.Args() args: DeleteMArketProfileArgs
  ): Promise<MArketProfile | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Group])
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async groups(
    @graphql.Parent() parent: MArketProfile,
    @graphql.Args() args: GroupFindManyArgs
  ): Promise<Group[]> {
    const results = await this.service.findGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
