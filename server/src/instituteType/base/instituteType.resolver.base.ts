/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateInstituteTypeArgs } from "./CreateInstituteTypeArgs";
import { UpdateInstituteTypeArgs } from "./UpdateInstituteTypeArgs";
import { DeleteInstituteTypeArgs } from "./DeleteInstituteTypeArgs";
import { InstituteTypeFindManyArgs } from "./InstituteTypeFindManyArgs";
import { InstituteTypeFindUniqueArgs } from "./InstituteTypeFindUniqueArgs";
import { InstituteType } from "./InstituteType";
import { GraduationTypeFindManyArgs } from "../../graduationType/base/GraduationTypeFindManyArgs";
import { GraduationType } from "../../graduationType/base/GraduationType";
import { Country } from "../../country/base/Country";
import { InstituteTypeService } from "../instituteType.service";

@graphql.Resolver(() => InstituteType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class InstituteTypeResolverBase {
  constructor(
    protected readonly service: InstituteTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InstituteType",
    action: "read",
    possession: "any",
  })
  async _instituteTypesMeta(
    @graphql.Args() args: InstituteTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InstituteType])
  @nestAccessControl.UseRoles({
    resource: "InstituteType",
    action: "read",
    possession: "any",
  })
  async instituteTypes(
    @graphql.Args() args: InstituteTypeFindManyArgs
  ): Promise<InstituteType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InstituteType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InstituteType",
    action: "read",
    possession: "own",
  })
  async instituteType(
    @graphql.Args() args: InstituteTypeFindUniqueArgs
  ): Promise<InstituteType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InstituteType)
  @nestAccessControl.UseRoles({
    resource: "InstituteType",
    action: "create",
    possession: "any",
  })
  async createInstituteType(
    @graphql.Args() args: CreateInstituteTypeArgs
  ): Promise<InstituteType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        country: args.data.country
          ? {
              connect: args.data.country,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InstituteType)
  @nestAccessControl.UseRoles({
    resource: "InstituteType",
    action: "update",
    possession: "any",
  })
  async updateInstituteType(
    @graphql.Args() args: UpdateInstituteTypeArgs
  ): Promise<InstituteType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          country: args.data.country
            ? {
                connect: args.data.country,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InstituteType)
  @nestAccessControl.UseRoles({
    resource: "InstituteType",
    action: "delete",
    possession: "any",
  })
  async deleteInstituteType(
    @graphql.Args() args: DeleteInstituteTypeArgs
  ): Promise<InstituteType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GraduationType])
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "read",
    possession: "any",
  })
  async graduationTypes(
    @graphql.Parent() parent: InstituteType,
    @graphql.Args() args: GraduationTypeFindManyArgs
  ): Promise<GraduationType[]> {
    const results = await this.service.findGraduationTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Country, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "any",
  })
  async country(
    @graphql.Parent() parent: InstituteType
  ): Promise<Country | null> {
    const result = await this.service.getCountry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
