/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGroupArgs } from "./CreateGroupArgs";
import { UpdateGroupArgs } from "./UpdateGroupArgs";
import { DeleteGroupArgs } from "./DeleteGroupArgs";
import { GroupFindManyArgs } from "./GroupFindManyArgs";
import { GroupFindUniqueArgs } from "./GroupFindUniqueArgs";
import { Group } from "./Group";
import { UserGroupFindManyArgs } from "../../userGroup/base/UserGroupFindManyArgs";
import { UserGroup } from "../../userGroup/base/UserGroup";
import { GraduationType } from "../../graduationType/base/GraduationType";
import { Institute } from "../../institute/base/Institute";
import { MArketProfile } from "../../mArketProfile/base/MArketProfile";
import { GroupService } from "../group.service";

@graphql.Resolver(() => Group)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class GroupResolverBase {
  constructor(
    protected readonly service: GroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async _groupsMeta(
    @graphql.Args() args: GroupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Group])
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async groups(@graphql.Args() args: GroupFindManyArgs): Promise<Group[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Group, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "own",
  })
  async group(
    @graphql.Args() args: GroupFindUniqueArgs
  ): Promise<Group | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Group)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "create",
    possession: "any",
  })
  async createGroup(@graphql.Args() args: CreateGroupArgs): Promise<Group> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        graduationType: args.data.graduationType
          ? {
              connect: args.data.graduationType,
            }
          : undefined,

        institute: args.data.institute
          ? {
              connect: args.data.institute,
            }
          : undefined,

        marketProfile: args.data.marketProfile
          ? {
              connect: args.data.marketProfile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Group)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "update",
    possession: "any",
  })
  async updateGroup(
    @graphql.Args() args: UpdateGroupArgs
  ): Promise<Group | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          graduationType: args.data.graduationType
            ? {
                connect: args.data.graduationType,
              }
            : undefined,

          institute: args.data.institute
            ? {
                connect: args.data.institute,
              }
            : undefined,

          marketProfile: args.data.marketProfile
            ? {
                connect: args.data.marketProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Group)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "delete",
    possession: "any",
  })
  async deleteGroup(
    @graphql.Args() args: DeleteGroupArgs
  ): Promise<Group | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserGroup])
  @nestAccessControl.UseRoles({
    resource: "UserGroup",
    action: "read",
    possession: "any",
  })
  async userGroups(
    @graphql.Parent() parent: Group,
    @graphql.Args() args: UserGroupFindManyArgs
  ): Promise<UserGroup[]> {
    const results = await this.service.findUserGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => GraduationType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GraduationType",
    action: "read",
    possession: "any",
  })
  async graduationType(
    @graphql.Parent() parent: Group
  ): Promise<GraduationType | null> {
    const result = await this.service.getGraduationType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Institute, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Institute",
    action: "read",
    possession: "any",
  })
  async institute(@graphql.Parent() parent: Group): Promise<Institute | null> {
    const result = await this.service.getInstitute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MArketProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MArketProfile",
    action: "read",
    possession: "any",
  })
  async marketProfile(
    @graphql.Parent() parent: Group
  ): Promise<MArketProfile | null> {
    const result = await this.service.getMarketProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
